<?php
/**
 * Tweetie.
 *
 * @copyright Wellenreiter (Wellenreiter)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Tweetie
 * @author Wellenreiter <wellenreiter01@t-online.de>.
 * @link http://www.keine.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.0 (http://modulestudio.de) at Mon Nov 18 23:11:04 CET 2013.
 */

/**
 * Validator class for encapsulating entity validation methods.
 *
 * This is the base validation class for twitterparm entities.
 */
class Tweetie_Entity_Validator_Base_Twitterparm extends Tweetie_Validator
{
    /**
     * Performs all validation rules.
     *
     * @return mixed either array with error information or true on success
     */
    public function validateAll()
    {
        $errorInfo = array('message' => '', 'code' => 0, 'debugArray' => array());
        $dom = ZLanguage::getModuleDomain('Tweetie');
        if (!$this->isValidInteger('id')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('id'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('id', 9)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('id', 9), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('workflowState')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('workflow state'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('consumerKey', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('consumer key', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('consumerKey')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('consumer key'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('consumerSecret', 100)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('consumer secret', 100), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('consumerSecret')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('consumer secret'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('accessKey', 80)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('access key', 80), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('accessKey')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('access key'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('accessSecret', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('access secret', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('accessSecret')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('access secret'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('hashtag', 8)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('hashtag', 8), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('hashtag')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('hashtag'), $dom);
            return $errorInfo;
        }
    
        return true;
    }
    
    /**
     * Check for unique values.
     *
     * This method determines if there already exist twitterparms with the same twitterparm.
     *
     * @param string $fieldName The name of the property to be checked
     * @return boolean result of this check, true if the given twitterparm does not already exist
     */
    public function isUniqueValue($fieldName)
    {
        if ($this->entity[$fieldName] == '') {
            return false;
        }
    
        $entityClass = 'Tweetie_Entity_Twitterparm';
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository($entityClass);
    
        $excludeid = $this->entity['id'];
    
        return $repository->detectUniqueState($fieldName, $this->entity[$fieldName], $excludeid);
    }
    
    /**
     * Get entity.
     *
     * @return Zikula_EntityAccess
     */
    public function getEntity()
    {
        return $this->entity;
    }
    
    /**
     * Set entity.
     *
     * @param Zikula_EntityAccess $entity.
     *
     * @return void
     */
    public function setEntity(Zikula_EntityAccess $entity = null)
    {
        $this->entity = $entity;
    }
    
}
